// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeTmpEasyjson(in *jlexer.Lexer, out *Settings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson(out *jwriter.Writer, in Settings) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Settings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Settings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Settings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Settings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson1(in *jlexer.Lexer, out *ResourceQuotaLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pods":
			out.Pods = string(in.String())
		case "services":
			out.Services = string(in.String())
		case "replicationControllers":
			out.ReplicationControllers = string(in.String())
		case "secrets":
			out.Secrets = string(in.String())
		case "configMaps":
			out.ConfigMaps = string(in.String())
		case "persistentVolumeClaims":
			out.PersistentVolumeClaims = string(in.String())
		case "servicesNodePorts":
			out.ServicesNodePorts = string(in.String())
		case "servicesLoadBalancers":
			out.ServicesLoadBalancers = string(in.String())
		case "requestsCpu":
			out.RequestsCPU = string(in.String())
		case "requestsMemory":
			out.RequestsMemory = string(in.String())
		case "requestsStorage":
			out.RequestsStorage = string(in.String())
		case "limitsCpu":
			out.LimitsCPU = string(in.String())
		case "limitsMemory":
			out.LimitsMemory = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson1(out *jwriter.Writer, in ResourceQuotaLimit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Pods != "" {
		const prefix string = ",\"pods\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Pods))
	}
	if in.Services != "" {
		const prefix string = ",\"services\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Services))
	}
	if in.ReplicationControllers != "" {
		const prefix string = ",\"replicationControllers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReplicationControllers))
	}
	if in.Secrets != "" {
		const prefix string = ",\"secrets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Secrets))
	}
	if in.ConfigMaps != "" {
		const prefix string = ",\"configMaps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConfigMaps))
	}
	if in.PersistentVolumeClaims != "" {
		const prefix string = ",\"persistentVolumeClaims\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PersistentVolumeClaims))
	}
	if in.ServicesNodePorts != "" {
		const prefix string = ",\"servicesNodePorts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServicesNodePorts))
	}
	if in.ServicesLoadBalancers != "" {
		const prefix string = ",\"servicesLoadBalancers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServicesLoadBalancers))
	}
	if in.RequestsCPU != "" {
		const prefix string = ",\"requestsCpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RequestsCPU))
	}
	if in.RequestsMemory != "" {
		const prefix string = ",\"requestsMemory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RequestsMemory))
	}
	if in.RequestsStorage != "" {
		const prefix string = ",\"requestsStorage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RequestsStorage))
	}
	if in.LimitsCPU != "" {
		const prefix string = ",\"limitsCpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LimitsCPU))
	}
	if in.LimitsMemory != "" {
		const prefix string = ",\"limitsMemory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LimitsMemory))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceQuotaLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceQuotaLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceQuotaLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceQuotaLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson1(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson2(in *jlexer.Lexer, out *ProjectStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]ProjectCondition, 0, 0)
					} else {
						out.Conditions = []ProjectCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ProjectCondition
					(v1).UnmarshalEasyJSON(in)
					out.Conditions = append(out.Conditions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "podSecurityPolicyTemplateId":
			out.PodSecurityPolicyTemplateName = string(in.String())
		case "monitoringStatus":
			if in.IsNull() {
				in.Skip()
				out.MonitoringStatus = nil
			} else {
				if out.MonitoringStatus == nil {
					out.MonitoringStatus = new(MonitoringStatus)
				}
				(*out.MonitoringStatus).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson2(out *jwriter.Writer, in ProjectStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"conditions\":"
		out.RawString(prefix[1:])
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Conditions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"podSecurityPolicyTemplateId\":"
		out.RawString(prefix)
		out.String(string(in.PodSecurityPolicyTemplateName))
	}
	if in.MonitoringStatus != nil {
		const prefix string = ",\"monitoringStatus\":"
		out.RawString(prefix)
		(*in.MonitoringStatus).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson2(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson3(in *jlexer.Lexer, out *ProjectSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayName":
			out.DisplayName = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "clusterName":
			out.ClusterName = string(in.String())
		case "resourceQuota":
			if in.IsNull() {
				in.Skip()
				out.ResourceQuota = nil
			} else {
				if out.ResourceQuota == nil {
					out.ResourceQuota = new(ProjectResourceQuota)
				}
				(*out.ResourceQuota).UnmarshalEasyJSON(in)
			}
		case "namespaceDefaultResourceQuota":
			if in.IsNull() {
				in.Skip()
				out.NamespaceDefaultResourceQuota = nil
			} else {
				if out.NamespaceDefaultResourceQuota == nil {
					out.NamespaceDefaultResourceQuota = new(NamespaceResourceQuota)
				}
				(*out.NamespaceDefaultResourceQuota).UnmarshalEasyJSON(in)
			}
		case "containerDefaultResourceLimit":
			if in.IsNull() {
				in.Skip()
				out.ContainerDefaultResourceLimit = nil
			} else {
				if out.ContainerDefaultResourceLimit == nil {
					out.ContainerDefaultResourceLimit = new(ContainerResourceLimit)
				}
				(*out.ContainerDefaultResourceLimit).UnmarshalEasyJSON(in)
			}
		case "enableProjectMonitoring":
			out.EnableProjectMonitoring = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson3(out *jwriter.Writer, in ProjectSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.ClusterName != "" {
		const prefix string = ",\"clusterName\":"
		out.RawString(prefix)
		out.String(string(in.ClusterName))
	}
	if in.ResourceQuota != nil {
		const prefix string = ",\"resourceQuota\":"
		out.RawString(prefix)
		(*in.ResourceQuota).MarshalEasyJSON(out)
	}
	if in.NamespaceDefaultResourceQuota != nil {
		const prefix string = ",\"namespaceDefaultResourceQuota\":"
		out.RawString(prefix)
		(*in.NamespaceDefaultResourceQuota).MarshalEasyJSON(out)
	}
	if in.ContainerDefaultResourceLimit != nil {
		const prefix string = ",\"containerDefaultResourceLimit\":"
		out.RawString(prefix)
		(*in.ContainerDefaultResourceLimit).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"enableProjectMonitoring\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnableProjectMonitoring))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson3(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson4(in *jlexer.Lexer, out *ProjectResourceQuota) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			(out.Limit).UnmarshalEasyJSON(in)
		case "usedLimit":
			(out.UsedLimit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson4(out *jwriter.Writer, in ProjectResourceQuota) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		(in.Limit).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"usedLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.UsedLimit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectResourceQuota) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectResourceQuota) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectResourceQuota) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectResourceQuota) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson4(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson5(in *jlexer.Lexer, out *ProjectCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "status":
			out.Status = ConditionStatus(in.String())
		case "lastUpdateTime":
			out.LastUpdateTime = string(in.String())
		case "lastTransitionTime":
			out.LastTransitionTime = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson5(out *jwriter.Writer, in ProjectCondition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.LastUpdateTime != "" {
		const prefix string = ",\"lastUpdateTime\":"
		out.RawString(prefix)
		out.String(string(in.LastUpdateTime))
	}
	if in.LastTransitionTime != "" {
		const prefix string = ",\"lastTransitionTime\":"
		out.RawString(prefix)
		out.String(string(in.LastTransitionTime))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProjectCondition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProjectCondition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProjectCondition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProjectCondition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson5(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson6(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(ProjectSpec)
				}
				(*out.Spec).UnmarshalEasyJSON(in)
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson6(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Spec).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson6(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson7(in *jlexer.Lexer, out *NamespaceResourceQuota) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			(out.Limit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson7(out *jwriter.Writer, in NamespaceResourceQuota) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		(in.Limit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamespaceResourceQuota) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamespaceResourceQuota) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamespaceResourceQuota) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamespaceResourceQuota) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson7(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson8(in *jlexer.Lexer, out *MonitoringStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "grafanaEndpoint":
			out.GrafanaEndpoint = string(in.String())
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]MonitoringCondition, 0, 0)
					} else {
						out.Conditions = []MonitoringCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 MonitoringCondition
					(v4).UnmarshalEasyJSON(in)
					out.Conditions = append(out.Conditions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson8(out *jwriter.Writer, in MonitoringStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GrafanaEndpoint != "" {
		const prefix string = ",\"grafanaEndpoint\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.GrafanaEndpoint))
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Conditions {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MonitoringStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MonitoringStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MonitoringStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MonitoringStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson8(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson9(in *jlexer.Lexer, out *MonitoringCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ClusterConditionType(in.String())
		case "status":
			out.Status = ConditionStatus(in.String())
		case "lastUpdateTime":
			out.LastUpdateTime = string(in.String())
		case "lastTransitionTime":
			out.LastTransitionTime = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson9(out *jwriter.Writer, in MonitoringCondition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.LastUpdateTime != "" {
		const prefix string = ",\"lastUpdateTime\":"
		out.RawString(prefix)
		out.String(string(in.LastUpdateTime))
	}
	if in.LastTransitionTime != "" {
		const prefix string = ",\"lastTransitionTime\":"
		out.RawString(prefix)
		out.String(string(in.LastTransitionTime))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MonitoringCondition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MonitoringCondition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MonitoringCondition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MonitoringCondition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson9(l, v)
}
func easyjson6601e8cdDecodeTmpEasyjson10(in *jlexer.Lexer, out *ContainerResourceLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requestsCpu":
			out.RequestsCPU = string(in.String())
		case "requestsMemory":
			out.RequestsMemory = string(in.String())
		case "limitsCpu":
			out.LimitsCPU = string(in.String())
		case "limitsMemory":
			out.LimitsMemory = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeTmpEasyjson10(out *jwriter.Writer, in ContainerResourceLimit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RequestsCPU != "" {
		const prefix string = ",\"requestsCpu\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RequestsCPU))
	}
	if in.RequestsMemory != "" {
		const prefix string = ",\"requestsMemory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RequestsMemory))
	}
	if in.LimitsCPU != "" {
		const prefix string = ",\"limitsCpu\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LimitsCPU))
	}
	if in.LimitsMemory != "" {
		const prefix string = ",\"limitsMemory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LimitsMemory))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContainerResourceLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeTmpEasyjson10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerResourceLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeTmpEasyjson10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContainerResourceLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeTmpEasyjson10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerResourceLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeTmpEasyjson10(l, v)
}
